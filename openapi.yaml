openapi: 3.0.3
info:
  title: Backuper API
  version: 1.0.0
  description: |
    API for authentication, worker registration and backup orchestration.
    Validation rules are described in schemas. Note: /auth/register is intended for dev-only use (documented).
servers:
  - url: https://api.example.com
    description: Production
paths:
  /auth/register:
    post:
      summary: Register user (DEV only)
      description: "Create new user. Endpoint intended to be enabled only in development mode."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegister'
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
  /auth/login:
    post:
      summary: Login with nick and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '200':
          description: Login successful — returns auth JWT and sets refresh token as HttpOnly cookie
          headers:
            Set-Cookie:
              description: "HttpOnly, Secure cookie that contains the refresh token. Example: refresh_token=<token>; HttpOnly; Secure; Path=/; SameSite=Strict"
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /auth/refresh:
    post:
      summary: Refresh auth JWT using HttpOnly refresh cookie
      description: "Client must send the refresh token in cookies. Endpoint returns a new auth JWT (in body) and may set a new refresh cookie."
      security:
        - cookieAuth: []
      responses:
        '200':
          description: New auth token issued
          headers:
            Set-Cookie:
              description: "New refresh token cookie (if rotated)."
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthOnlyResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /workers:
    post:
      summary: Register a new worker (client-facing)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkerRegister'
      responses:
        '201':
          description: Worker registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkerRegistered'
        '400':
          $ref: '#/components/responses/BadRequest'
    get:
      summary: List available backup options and how often (system-level)
      description: "Return JSON describing what items can be selected for backup and default frequencies."
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Backup options
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BackupOptionsList'
  /workers/{workerId}/reports:
    get:
      summary: List reports for a worker
      parameters:
        - name: workerId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Reports list
          content:
            application/json:
              schema:
                type: object
                properties:
                  workerId:
                    type: string
                    format: uuid
                  reports:
                    type: array
                    items:
                      $ref: '#/components/schemas/WorkerReport'
        '404':
          $ref: '#/components/responses/NotFound'
  /worker:
    get:
      summary: Worker root — basic info and available worker endpoints
      description: "Информационная точка для воркеров. Возвращает список доступных подэндпоинтов и краткое описание."
      security:
        - workerAuth: []
      responses:
        '200':
          description: Worker API root
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkerRoot'
  /worker/alive:
    get:
      summary: Worker liveness check
      description: "Worker can call this to confirm server is reachable (or server can call to check worker)."
      security:
        - workerAuth: []
      responses:
        '200':
          description: Alive
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: alive
  /worker/capabilities:
    get:
      summary: What can I backup? (capabilities)
      description: "Returns JSON describing capabilities the worker can perform (allowed item types, limits)."
      security:
        - workerAuth: []
      responses:
        '200':
          description: Capabilities
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BackupCapabilities'
  /worker/plan:
    post:
      summary: Receive backup plan (what to backup, how often, and presigned s3 URLs)
      description: "Server sends the worker a list of items to backup including presigned S3 URLs where each item must be uploaded."
      security:
        - workerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BackupPlan'
      responses:
        '200':
          description: Plan accepted
          content:
            application/json:
              schema:
                type: object
                properties:
                  accepted:
                    type: boolean
                    example: true
        '400':
          $ref: '#/components/responses/BadRequest'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    cookieAuth:
      type: apiKey
      in: cookie
      name: refresh_token
    workerAuth:
      type: apiKey
      in: header
      name: Authorization
      description: 'Worker token header. Required format: "Worker <token>"'
  schemas:
    UserRegister:
      type: object
      required:
        - nick
        - password
      properties:
        nick:
          type: string
          description: "User nickname: alphanumeric and underscores, 3-32 chars."
          minLength: 3
          maxLength: 32
          pattern: '^[A-Za-z0-9_]+$'
          example: alice_01
        password:
          type: string
          description: "Password: minimum 8 characters, must contain letters and digits."
          minLength: 8
          pattern: '^(?=.*[A-Za-z])(?=.*\d)[A-Za-z\d]{8,}$'
          example: Passw0rd
      description: "Registration payload. Endpoint should be disabled in production."
    UserLogin:
      type: object
      required:
        - nick
        - password
      properties:
        nick:
          $ref: '#/components/schemas/UserRegister/properties/nick'
        password:
          $ref: '#/components/schemas/UserRegister/properties/password'
    AuthResponse:
      type: object
      properties:
        access_token:
          type: string
          description: "JWT used in Authorization: Bearer <token>"
        token_type:
          type: string
          example: Bearer
        expires_in:
          type: integer
          description: "Seconds until access token expires."
      required:
        - access_token
    AuthOnlyResponse:
      type: object
      properties:
        access_token:
          type: string
        expires_in:
          type: integer
      required:
        - access_token
    WorkerRegister:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
          description: "Human-readable worker name."
          example: worker-eu-1
    WorkerRegistered:
      type: object
      properties:
        worker_uuid:
          type: string
          format: uuid
          description: "Unique worker UUID."
        worker_token:
          type: string
          description: "Secret token for the worker to authenticate (store securely)."
      required:
        - worker_uuid
        - worker_token
    WorkerReport:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        action:
          type: string
        details:
          type: object
          additionalProperties: true
    Frequency:
      type: string
      description: "Predefined frequency or 'custom' for cron expression."
      enum:
        - hourly
        - daily
        - weekly
        - monthly
        - custom
    BackupItem:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
          description: "Unique ID for selectable backup item."
        name:
          type: string
        description:
          type: string
        default_frequency:
          $ref: '#/components/schemas/Frequency'
    BackupOptionsList:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/BackupItem'
    BackupCapabilities:
      type: object
      properties:
        max_parallel_uploads:
          type: integer
          minimum: 1
          example: 3
        supported_item_types:
          type: array
          items:
            type: string
          example: ['database', 'filesystem', 'objectstore']
        notes:
          type: string
    BackupPlan:
      type: object
      required:
        - plan_id
        - items
      properties:
        plan_id:
          type: string
          description: "Server-side identifier for the plan."
        items:
          type: array
          minItems: 1
          items:
            type: object
            required:
              - item_id
              - frequency
              - upload_url
            properties:
              item_id:
                type: string
              frequency:
                $ref: '#/components/schemas/Frequency'
              cron:
                type: string
                description: "If frequency == custom, cron expression (basic validation)."
                pattern: '^([0-5]?\\d\\s+){4}[0-5]?\\d$'
              upload_url:
                type: string
                format: uri
                description: "Presigned S3 URL where worker must PUT the backup blob."
              meta:
                type: object
                additionalProperties: true
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
    WorkerRoot:
      type: object
      properties:
        self:
          type: string
          example: /worker
        endpoints:
          type: array
          items:
            type: object
            properties:
              path:
                type: string
              method:
                type: string
              description:
                type: string
          example:
            - path: /worker/alive
              method: GET
              description: Liveness check
            - path: /worker/capabilities
              method: GET
              description: Get capabilities (what can be backed up)
            - path: /worker/plan
              method: POST
              description: Receive backup plan with presigned S3 URLs
  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
security:
  - bearerAuth: []
